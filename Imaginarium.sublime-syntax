%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Imaginarium
file_extensions: [gen]
scope: source.gen

variables:
  all: '^ *[Aa]ll'
  ident: '[a-zA-Z][a-zA-Z0-9 -]+'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    - include: strings
    - include: markupAndTests
    - include: sentencePatterns

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.gen
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.gen
    - match: '\.'
      scope: constant.character.escape.gen
    - match: '"'
      scope: punctuation.definition.string.end.gen
      pop: true

  comments:
    - match: '#'
      scope: punctuation.definition.comment.gen
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.hash.gen
        - match: $\n?
          pop: true

  markupAndTests:
    - match: '([Tt]he plural of|[Tt]he singular of) ({{ident}}) (is) ({{ident}})'
      captures:
        1: constant.language.gen
        2: entity.name.gen
        3: keyword.operator.word.gen
        4: entity.name.gen
    - match: '({{ident}}) (is|are) (identified as|described as)'
      captures:
        1: entity.name.gen
        2: keyword.operator.word.gen
        3: constant.language.gen
    - match: '([Dd]o not mention) (being) ({{ident}})'
      captures:
        1: constant.language.gen
        2: keyword.operator.word.gen
        3: entity.name.gen
    - match: '({{ident}}) (should exist|should not exist)'
      captures:
        1: entity.name.gen
        2: constant.language.gen
    - match: '([Pp]ressing) .* (means) .*'
      captures:
        1: keyword.control.gen
        2: keyword.control.gen


  sentencePatterns:
    - match: '({{all}} )?({{ident}}) (is|are) (any) ([0-9]+) (of) ({{ident}})'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word
        4: keyword.operator.word
        5: constant.numeric.gen
        6: keyword.operator.word
        7: entity.name.gen
    - match: '({{all}} )?({{ident}}) (can be) (up to) ([0-9]+) (of) ({{ident}})'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word
        4: keyword.operator.word
        5: constant.numeric.gen
        6: keyword.operator.word
        7: entity.name.gen
    - match: '({{all}} )?({{ident}}) (are) (between) ([0-9]+) (and) ([0-9]+) (of) ({{ident}})'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word
        4: keyword.operator.word
        5: constant.numeric.gen
        6: keyword.operator.word
        7: constant.numeric.gen
        8: keyword.operator.word
        9: entity.name.gen
    - match: '({{all}} )?({{ident}}) (has|have) ({{ident}}) (between) ([0-9]+) (and) ([0-9]+)'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word.gen
        4: entity.name.gen
        5: keyword.operator.word.gen
        6: constant.numeric.gen
        7: keyword.operator.word.gen
        8: constant.numeric.gen
    - match: '({{all}} )?({{ident}}) (has|have) ({{ident}}) (from) ({{ident}})'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word.gen
        4: entity.name.gen
        5: keyword.operator.word.gen
        6: variable.parameter.gen
    - match: '({{all}} )?({{ident}}) (has|have) ({{ident}}) (called its) ({{ident}})'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word.gen
        4: entity.name.gen
        5: keyword.operator.word.gen
        6: entity.name.gen
    - match: '({{all}} )?({{ident}}) (can|must) ({{ident}}) (one|many|other) ({{ident}})'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word.gen
        4: entity.name.gen
        5: keyword.control.gen
        6: entity.name.gen
    - match: '({{ident}}) (is|are) (rare|common)'
      captures:
        1: entity.name.gen
        2: keyword.operator.word.gen
        3: constant.language.gen
    - match: '({{ident}}) (and) ({{ident}}) (are) (mutually exclusive)'
      captures:
        1: entity.name.gen
        2: keyword.operator.word.gen
        3: entity.name.gen
        4: keyword.operator.word.gen
        5: constant.language.gen
    - match: '({{ident}}) (is) (mutually exclusive with) ({{ident}})'
      captures:
        1: entity.name.gen
        2: keyword.operator.word.gen
        3: constant.language.gen
        4: entity.name.gen
    - match: '({{ident}}) (implies|is a way of) ({{ident}})'
      captures:
        1: entity.name.gen
        2: keyword.operator.word.gen
        3: entity.name.gen
    - match: '({{all}} )?({{ident}}) (can|cannot|always) ({{ident}}) (itself|each other)'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word.gen
        4: entity.name.gen
        5: constant.language.gen
    - match: '({{all}} )?({{ident}}) (can|cannot|always) ({{ident}}) (another) ({{ident}})'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word.gen
        4: entity.name.gen
        5: constant.language.gen
        6: entity.name.gen
    - match: '({{ident}}) (is|are) (a kind of|kinds of) ({{ident}})'
      captures:
        1: entity.name.gen
        2: keyword.operator.word.gen
        3: constant.language.gen
        4: entity.name.gen
    - match: '({{ident}}) (is) (always )?({{ident}})'
      captures:
        1: entity.name.gen
        2: keyword.operator.gen
        3: keyword.operator.gen
        4: entity.name.gen
    - match: '({{all}} )?({{ident}}) (can be|is|are) ({{ident}})'
      captures:
        1: keyword.operator.word.gen
        2: entity.name.gen
        3: keyword.operator.word
        4: entity.name.gen